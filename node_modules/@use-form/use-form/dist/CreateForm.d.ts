import React from 'react';
import { CreateFormArgs, Errors, Field, HookArgs, State, Touched } from './Types';
import { StateChange } from '.';
/**
 * createForm function create a form Store and return a hook that can be used to manage the form state.
 * @param args CreateFormArgs type that contains the initial values of form, initial errors of form, initial touched of form,
 * @returns {function(*): *} a function that returns a hook that can be used to manage the form state.
 **/
export declare function createForm<T extends CreateFormArgs<T['initialValues']>>(args: T): (hookArgs?: HookArgs<T["initialValues"]> | undefined) => {
    form: {
        get: () => {
            values: {} & T["initialValues"];
            errors: Errors<T["initialValues"]>;
            touched: Touched<T["initialValues"]>;
            isValid: boolean;
        };
        set: (nextState: {
            values: {} & T["initialValues"];
            errors: Errors<T["initialValues"]>;
            touched: Touched<T["initialValues"]>;
            isValid: boolean;
        }) => void;
        patch: (path: string, next: any) => void;
        subscribe: (fn: (e: {
            values: {} & T["initialValues"];
            errors: Errors<T["initialValues"]>;
            touched: Touched<T["initialValues"]>;
            isValid: boolean;
        }) => void) => () => void;
        getPropertyValue: (path: string) => any;
        getInitialState: () => {
            values: {} & T["initialValues"];
            errors: Errors<T["initialValues"]>;
            touched: Touched<T["initialValues"]>;
            isValid: boolean;
        };
        getInitialPropertyValue: (path: string) => any;
    };
    register: (name: string) => React.RefObject<Field>;
    setFieldValue: (name: string, value: any) => void;
    setFieldsValue: (next: StateChange<T['initialValues']>) => void;
    setFieldError: (name: string, error: string) => void;
    setFieldsError: (next: StateChange<Errors<T['initialValues']>>) => void;
    setFieldTouched: (name: string, touched?: boolean) => void;
    setFieldsTouched: (next: StateChange<Touched<T['initialValues']>>) => void;
    reset: () => void;
    resetValues: () => void;
    resetErrors: () => void;
    resetTouched: () => void;
    handleSubmit: (submit: (values: T['initialValues'], isValid: boolean) => void) => (event: React.FormEvent<HTMLFormElement>) => void;
    setFieldStoreTouched: (name: string, touched?: boolean) => void;
    setFieldStoreValue: (name: string, value: any) => void;
    state: State<T["initialValues"]>;
};
