import React, { Fragment } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function propToPath(prop) {
    return prop.replace(/["|']|\]/g, '').split(/\.|\[/);
}
function set(defaultObject, prop, value) {
    var paths = propToPath(prop);
    function setPropertyValue(object, index) {
        if (object === void 0) { object = {}; }
        var clone = Object.assign({}, object);
        if (paths.length > index) {
            if (Array.isArray(object)) {
                paths[index] = parseInt(paths[index]);
                clone = object.slice();
            }
            clone[paths[index]] = setPropertyValue(object[paths[index]], index + 1);
            return clone;
        }
        return value;
    }
    return setPropertyValue(defaultObject, 0);
}
function get(defaultObject, prop) {
    var paths = propToPath(prop);
    function getPropertyValue(object, index) {
        if (object === void 0) { object = {}; }
        var clone = Object.assign({}, object);
        if (paths.length === index + 1) {
            if (Array.isArray(clone[paths[index]])) {
                return clone[paths[index]].slice();
            }
            else if (typeof clone[paths[index]] === 'object') {
                if (clone[paths[index]] === null) {
                    return null;
                }
                return Object.assign({}, clone[paths[index]]);
            }
            return clone[paths[index]];
        }
        return getPropertyValue(object[paths[index]], index + 1);
    }
    return getPropertyValue(defaultObject, 0);
}
function isEmpty(obj) {
    for (var key in obj) {
        if (Object.hasOwnProperty.call(obj, key)) {
            return false;
        }
    }
    return true;
}

function createStore(initialState) {
    if (initialState === void 0) { initialState = Object.assign({}); }
    var state = initialState;
    var subscribers = [];
    function get$1() {
        return state;
    }
    function subscribe(fn) {
        subscribers = __spreadArray(__spreadArray([], subscribers, true), [fn], false);
        return function () {
            subscribers = subscribers.filter(function (l) { return l !== fn; });
        };
    }
    function set$1(nextState) {
        state = nextState;
        notify();
    }
    function patch(path, next) {
        var nextState = set(state, path, next);
        if (typeof nextState !== 'undefined') {
            state = nextState;
            notify();
        }
        else {
            throw new Error("The path '".concat(path, "' is not defined"));
        }
    }
    function getPropertyValue(path) {
        return get(state, path);
    }
    function getInitialPropertyValue(path) {
        return get(initialState, path);
    }
    function getInitialState() {
        return initialState;
    }
    function notify() {
        subscribers.forEach(function (fn) {
            fn(get$1());
        });
    }
    return {
        get: get$1,
        set: set$1,
        patch: patch,
        subscribe: subscribe,
        getPropertyValue: getPropertyValue,
        getInitialState: getInitialState,
        getInitialPropertyValue: getInitialPropertyValue
    };
}

function isCheckbox(field) {
    return field.type === 'checkbox';
}
function isRadio(field) {
    return !!(field === null || field === void 0 ? void 0 : field.querySelector('input[type="radio"]'));
}
function extractRadioElements(field) {
    return Array.from(field.querySelectorAll('input[type="radio"]'));
}

function debounce(fn, wait, immediate) {
    var _this = this;
    var timeout;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var context = _this;
        var later = function () {
            timeout = null;
            if (!immediate)
                fn.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) {
            fn.apply(context, args);
        }
    };
}

function makeDotNotation(str) {
    return str.split('[').join('.').split(']').join('');
}
function validate(values, validationSchema) {
    return validationSchema === null || validationSchema === void 0 ? void 0 : validationSchema.validate(values, { abortEarly: false }).then(function () {
        return {};
    }).catch(function (e) {
        throw e.inner.reduce(function (acc, key) {
            var path = makeDotNotation(key.path);
            return set(acc, path, key.message);
        }, {});
    });
}

var Exception = /** @class */ (function (_super) {
    __extends(Exception, _super);
    function Exception(message) {
        var _this = _super.call(this, message) || this;
        _this.name = _this.constructor.name;
        Error.captureStackTrace(_this, _this.constructor);
        return _this;
    }
    return Exception;
}(Error));
var InvalidArgumentException = /** @class */ (function (_super) {
    __extends(InvalidArgumentException, _super);
    function InvalidArgumentException(message) {
        return _super.call(this, message) || this;
    }
    return InvalidArgumentException;
}(Exception));
var InvalidOperationException = /** @class */ (function (_super) {
    __extends(InvalidOperationException, _super);
    function InvalidOperationException(message) {
        return _super.call(this, message) || this;
    }
    return InvalidOperationException;
}(Exception));

var defaultValues = {
    initialValues: {},
    initialErrors: {},
    initialTouched: {}
};
/**
 * createForm function create a form Store and return a hook that can be used to manage the form state.
 * @param args CreateFormArgs type that contains the initial values of form, initial errors of form, initial touched of form,
 * @returns {function(*): *} a function that returns a hook that can be used to manage the form state.
 **/
function createForm(args) {
    var _a = __assign(__assign({}, defaultValues), args), initialValues = _a.initialValues, initialErrors = _a.initialErrors, initialTouched = _a.initialTouched, validationSchema = _a.validationSchema;
    /**
     * This is the store of the form,
     * it is an object that contains the values of form,
     * errors of form,
     * touched of form.
     **/
    var $store = createStore({
        values: initialValues,
        errors: initialErrors,
        touched: initialTouched,
        isValid: isEmpty(initialErrors)
    });
    return function (hookArgs) {
        /**
         * This is the reference of all native inputs of the form,
         * in order to have the same reference of all inputs of the form.
         **/
        var inputsRefs = React.useRef({});
        /**
         * This is the state of the form,
         * it is an object that contains the values of form,
         * errors of form,
         * touched of form.
         **/
        var _a = React.useState($store.get()), state = _a[0], setState = _a[1];
        /**
         * Debounce mode is a mode that is used when the form is debounced,
         **/
        var setStateDebounced = React.useCallback(debounce(setState, 500), []);
        /**
         * This is the function that is used to set the state of the form, using debounce mode.
         * Because we are using native events to update the input value consequently we have many events that are fired at the same time,
         * so we need to debounce the state update to avoid the state to be updated many times.
         * @param state
         **/
        var persistNextStateDebounced = React.useCallback(debounce(persistNextState, 100), []);
        /**
         * Register a new input to the form,
         * this function is called by the Input component.
         * @param name the name of the input
         **/
        function register(name) {
            if (!name) {
                throw new InvalidArgumentException('Input name is required');
            }
            var ref = React.useRef(null);
            inputsRefs.current[name] = ref;
            React.useEffect(function () {
                if (ref.current) {
                    ref.current.name = name;
                    return persistInitialValues(name, get(initialValues, name));
                }
                throw new InvalidOperationException('your input is not rendered yet, or you have not provided a name to the input, or you have not using the register function in the Input component');
            }, [ref]);
            React.useEffect(function () {
                var _a;
                (_a = ref.current) === null || _a === void 0 ? void 0 : _a.addEventListener('input', handleChange);
                return function () {
                    var _a;
                    (_a = ref.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('input', handleChange);
                };
            }, []);
            React.useEffect(function () {
                if (ref.current) {
                    ref.current.addEventListener('blur', handleBlur);
                }
                return function () {
                    var _a;
                    (_a = ref.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('blur', handleBlur);
                };
            }, []);
            return ref;
        }
        /**
         * This function will handle input events of the form,
         * @param event the event that will be handled
         **/
        function handleChange(event) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var _b, name, value, checked, nextValue, errors_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = event.target, name = _b.name, value = _b.value, checked = _b.checked;
                            nextValue = event.detail !== undefined && event.detail !== 0
                                ? event.detail
                                : value;
                            if (isCheckbox(event.target)) {
                                $store.patch("values.".concat(name), checked);
                            }
                            else {
                                $store.patch("values.".concat(name), nextValue);
                            }
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, validate($store.getPropertyValue('values'), validationSchema)];
                        case 2:
                            _c.sent();
                            $store.patch('isValid', true);
                            $store.patch('errors', {});
                            return [3 /*break*/, 4];
                        case 3:
                            errors_1 = _c.sent();
                            $store.patch('isValid', false);
                            $store.patch('errors', errors_1);
                            return [3 /*break*/, 4];
                        case 4:
                            (_a = hookArgs === null || hookArgs === void 0 ? void 0 : hookArgs.onChange) === null || _a === void 0 ? void 0 : _a.call(hookArgs, $store.getPropertyValue('values'));
                            return [2 /*return*/];
                    }
                });
            });
        }
        /**
         * This function will handle blur events
         * @param event the event that will be handled
         **/
        function handleBlur(event) {
            var name = event.target.name;
            $store.patch("touched.".concat(name), true);
            if (hookArgs === null || hookArgs === void 0 ? void 0 : hookArgs.onBlur) {
                hookArgs.onBlur(state.values);
            }
        }
        /**
         * This function will handle form submit
         **/
        function handleSubmit(submit) {
            if (typeof submit !== 'function') {
                throw Error('Submit function is required');
            }
            /**
             * This function will handle submit event
             * @param event the event that will be handled
             **/
            return function (event) {
                event.preventDefault();
                var state = $store.get();
                var values = state.values, isValid = state.isValid;
                setState(state);
                submit(values, isValid);
            };
        }
        /**
         * Persist initial values in native fields
         * @param values the values of the form
         **/
        function persistInitialValues(name, value) {
            setFieldValue(name, value);
        }
        /**
         * This function will set the value into input ref,
         * @param name the name of the input
         * @param value the value of the input
         **/
        function setFieldValue(name, value) {
            var ref = inputsRefs.current[name];
            if (ref && ref.current) {
                ref.current.value = value;
                if (isCheckbox(ref.current)) {
                    ref.current.checked = value;
                }
                else if (isRadio(ref.current)) {
                    var radios = extractRadioElements(ref.current);
                    for (var _i = 0, radios_1 = radios; _i < radios_1.length; _i++) {
                        var radio = radios_1[_i];
                        radio.checked = radio.value === value;
                    }
                }
                /**---- Trigger change event ----*/
                ref.current.dispatchEvent(new Event('input'));
            }
            else {
                throw Error("Input with name '".concat(name, "' is not registered, verify the input name."));
            }
        }
        /**
         * This function will set all inputs value into the input elements,
         * @param values the values of the form
         **/
        function setFieldsValue(next) {
            var nextValues = 
            //@ts-ignore
            typeof next === 'function' ? next(state.values) : next;
            var names = Object.keys(inputsRefs.current);
            try {
                for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
                    var name_1 = names_1[_i];
                    var next_1 = get(nextValues, name_1);
                    if (next_1 !== undefined) {
                        setFieldValue(name_1, next_1);
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        }
        /**
         * This function will set the error into the state of the form,
         * @param name the name of the input
         * @param error the error of the input
         **/
        function setFieldError(name, error) {
            try {
                $store.patch("errors.".concat(name), error);
            }
            catch (e) {
                console.error(e);
            }
        }
        /**
         * This function will set all inputs error into the state of the form,
         * @param errors the errors of the form
         **/
        function setFieldsError(next) {
            var nextErrors = typeof next === 'function' ? next($store.get().errors) : next;
            try {
                $store.patch('errors', nextErrors);
            }
            catch (e) {
                console.error(e);
            }
        }
        /**
         * This function will set the touched into the state of the form,
         * @param name the name of the input
         * @param touched the touched of the input
         **/
        function setFieldTouched(name, touched) {
            if (touched === void 0) { touched = true; }
            try {
                $store.patch("touched.".concat(name), touched);
            }
            catch (e) {
                console.error(e);
            }
        }
        /**
         * This function will set all inputs touched into the state of the form,
         * @param touched the touched of the form
         **/
        function setFieldsTouched(next) {
            var nextTouched = typeof next === 'function' ? next($store.get().touched) : next;
            var names = Object.keys(inputsRefs.current);
            try {
                if (!nextTouched) {
                    for (var _i = 0, names_2 = names; _i < names_2.length; _i++) {
                        var name_2 = names_2[_i];
                        setFieldTouched(name_2);
                    }
                }
                $store.patch('touched', nextTouched);
            }
            catch (e) {
                console.error(e);
            }
        }
        /**
         * This function will reset the form as initial state,
         **/
        function reset() {
            setFieldsValue(initialValues);
            setFieldsError(initialErrors);
            setFieldsTouched(initialTouched);
        }
        /**
         * This function will reset the form as initial values,
         **/
        function resetValues() {
            setFieldsValue(initialValues);
        }
        /**
         * This function will reset the form as initial errors,
         **/
        function resetErrors() {
            $store.patch('errors', initialErrors);
        }
        /**
         * This function will reset the form as initial touched,
         **/
        function resetTouched() {
            $store.patch('touched', initialTouched);
        }
        /**
         * This function will patch the state of the form, by setting the value of the input into form store,
         * @param name the name of the input
         * @param value the value of the input
         **/
        function setFieldStoreValue(name, value) {
            try {
                $store.patch("values.".concat(name), value);
            }
            catch (e) {
                console.error(e);
            }
        }
        /**
         * This function will patch the state of the form, by setting the touched of the input into form store,
         * @param name the name of the input
         * @param touched the touched of the input
         **/
        function setFieldStoreTouched(name, touched) {
            if (touched === void 0) { touched = true; }
            try {
                $store.patch("touched.".concat(name), touched);
            }
            catch (e) {
                console.error(e);
            }
        }
        function persistNextState(nextState) {
            if ((hookArgs === null || hookArgs === void 0 ? void 0 : hookArgs.mode) === 'debounce') {
                setStateDebounced(nextState);
            }
            else if ((hookArgs === null || hookArgs === void 0 ? void 0 : hookArgs.mode) === 'onChange') {
                setState(nextState);
            }
        }
        /**
         * Subscribe to the store to get the next state and update the form
         **/
        React.useEffect(function () {
            var unsubscribe = $store.subscribe(persistNextStateDebounced);
            return function () {
                unsubscribe();
            };
        }, []);
        return {
            form: $store,
            register: register,
            setFieldValue: setFieldValue,
            setFieldsValue: setFieldsValue,
            setFieldError: setFieldError,
            setFieldsError: setFieldsError,
            setFieldTouched: setFieldTouched,
            setFieldsTouched: setFieldsTouched,
            reset: reset,
            resetValues: resetValues,
            resetErrors: resetErrors,
            resetTouched: resetTouched,
            handleSubmit: handleSubmit,
            setFieldStoreTouched: setFieldStoreTouched,
            setFieldStoreValue: setFieldStoreValue,
            state: state
        };
    };
}

function WrapperComponent(_a, ref) {
    var _b;
    var component = _a.component, rest = __rest(_a, ["component"]);
    var Component = component;
    var _c = React.useState(null), value = _c[0], setValue = _c[1];
    function handleOnChange(e) {
        var _a;
        if (ref.current) {
            ref.current.value = e;
            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent('input', { detail: e }));
        }
    }
    function handleOnBlur(e) {
        var _a;
        if (ref.current) {
            ref.current.value = e;
            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent('blur', { detail: true }));
        }
    }
    function handleEvent(e) {
        var _a;
        setValue((_a = e.detail) !== null && _a !== void 0 ? _a : e.target.value);
    }
    React.useEffect(function () {
        if (ref.current) {
            ref.current.addEventListener('input', handleEvent);
        }
        return function () {
            if (ref.current) {
                ref.current.removeEventListener('input', handleEvent);
            }
        };
    }, [ref.current]);
    return (React.createElement(Fragment, null,
        React.createElement("div", { ref: ref, hidden: true }),
        React.createElement(Component, __assign({}, rest, { value: value, selected: (_b = ref.current) === null || _b === void 0 ? void 0 : _b.value, onChange: handleOnChange, onBlur: handleOnBlur }))));
}
var Wrapper = React.forwardRef(WrapperComponent);

export { Wrapper, createForm };
//# sourceMappingURL=index.es.js.map
